
class BoundedBlockingQueue {
private:
    int capacity = 0;
    mutex m;
    condition_variable queue_not_full;
    condition_variable queue_not_empty;
    queue<int>q;
public:
    BoundedBlockingQueue(int capacity) {
        this->capacity = capacity;
    }
    
    void enqueue(int element) {
        unique_lock<mutex> lk(m);
        while (q.size() == capacity) {
            queue_not_full.wait(lk);
        }
        q.push(element);
        lk.unlock();
        queue_not_empty.notify_one();
    }
    
    int dequeue() {
        unique_lock<mutex> lk(m);
        while (q.size() == 0) {
            queue_not_empty.wait(lk);
        }
        int ele = q.front();
        q.pop();
        lk.unlock();
        queue_not_full.notify_one();
        return ele;
    }
    
    int size() {
        return q.size();
    }
};
