#include <iostream>
using namespace std;
template <class T>
class Dynamic_arr
{
  T *arr;
  int arr_size;
  int cur_size;
  public:
  Dynamic_arr(int start_sz = 10) {
    arr = new T[start_sz];      // can throw exception
    arr_size = start_sz;
    cur_size = 0;
  }
  T get_val(int index) {
    if (index >= cur_size) {
      throw std::out_of_range ("Index out of range");
    }
    return arr[index];
  }
  void append(T val) {
    if (cur_size == arr_size) {
      if (arr_size==0) {
        arr_size=1;
      }
      T * temp_arr = new T[arr_size*2];    // can throw exception
      for (int i=0; i<cur_size;i++) {
        temp_arr[i]=arr[i];
      }
      delete [] arr;
      arr = temp_arr;
      arr_size = arr_size*2;
    }
    arr[cur_size] = val;
    cur_size++;
  }
};

int main() {
  Dynamic_arr<int> vec(0);
  for (int i=0; i<1000; i++) {
    vec.append(i);
  }
  for (int i=0; i<1000; i++) {
    cout<<vec.get_val(i)<<",";
  }
  Dynamic_arr<string> vec2;
  vec2.append("hello");
  vec2.append("world");
  vec2.append("how are you doing?");
  cout<<vec2.get_val(0)<<"\n";
  cout<<vec2.get_val(1)<<"\n";
  cout<<vec2.get_val(2)<<"\n";
  return 0;
}
