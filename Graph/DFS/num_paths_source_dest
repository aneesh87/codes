Given a directed acyclic graph which has only one source and one destination,
how many paths do we have from source to target ?

example1:

input: graph, src = 0, dest = 3

       1
      ^ \
     /   \
    /     V
   0 ----> 3
    \     ^
     \   /
      V /
       2


output: 3

explanation:
    0 --> 1 --> 3
    0 --> 2 --> 3
    0 --> 3

Solution:

DFS and memoization.

Once a vertex is done with all its direct children, we can set its value.
The value can be reused by ancestors of vertex.Since its dag, you will 
never encounter a vertex which is your ancestor during the expansion. 
Other way is bottom up order of buiding num paths in order: 0->1->2->3

void dfs(vector<int>&visited, int u, vector<vector<int>>&edjlist, int dest) {
    if (u == dest) {
        visited[u] = 1;
        return;
    } else {
        visited[u] = 0;
    }
    for (int i=0; i<edjlist[u].size();i++) {
        int v = edjlist[u][i];
        if (visited[v] == -1) {
            dfs(visited, v, edjlist, count);
        }
        visited[u]+=visited[v];
    }
}
int num_paths(int N, vector<vector<int>>edjlist) {
    vector<int>visited(N, -1);
    dfs(visited, 0, edjlist, N-1);
    return visited[0];
}
